Python API
==========

polyhedral_gravity
------------------

Computes the full gravity tensor for a given constant density polyhedron which consists of some
vertices and triangular faces at given computation points

.. py::module:: polyhedral_gravity

Computes the full gravity tensor for a given constant density polyhedron which consists of some vertices and
triangular faces at a given computation point :math:`P`

.. py:function:: evaluate(vertices, faces, density, computation_point)
   :noindex:

   Evaluate the full gravity tensor for a given constant density polyhedron which consists of some vertices and
   triangular faces at a given computation point P

   :param List[List[float[3]]] vertices: vertices of the polyhedron
   :param List[List[int[3]]] faces: faces of the polyhedron
   :param float density: constant density in :math:`\frac{kg}{m^3}`
   :param List[float[3]] computation_point: cartesian computation point :math:`P`
   :return: tuple of potential, acceleration, and second derivative tensor
   :rtype: Tuple[float, List[float[3]], List[float[6]]]


.. py:function:: evaluate(vertices, faces, density, computation_points)
   :noindex:

   Evaluate the full gravity tensor for a given constant density polyhedron which consists of some vertices and
   triangular faces at multiple given computation points

   :param List[List[float[3]]] vertices: vertices of the polyhedron
   :param List[List[int[3]]] faces: faces of the polyhedron
   :param float density: constant density in :math:`\frac{kg}{m^3}`
   :param List[List[float[3]]] computation_points: multiple cartesian computation points :math:`P`
   :return: list of tuple of potential, acceleration, and second derivative tensor
   :rtype: List[Tuple[float, List[float[3]], List[float[6]]]]

.. py:function:: evaluate(input_files, density, computation_point)
   :noindex:

   Evaluate the full gravity tensor for a given constant density polyhedron which consists of some vertices and
   triangular faces at a given computation point :math:`P`

   :param List[str] input_files: polyhedral source files
   :param float density: constant density in :math:`\frac{kg}{m^3}`
   :param List[float[3]] computation_point: cartesian computation point :math:`P`
   :return: tuple of potential, acceleration, and second derivative tensor
   :rtype: Tuple[float, List[float[3]], List[float[6]]]

.. py:function:: evaluate(input_files, density, computation_points)
   :noindex:

    Evaluate the full gravity tensor for a given constant density polyhedron which consists of some vertices and
    triangular faces at multiple given computation points

   :param List[str] input_files: polyhedral source files
   :param List[List[int[3]]] faces: faces of the polyhedron
   :param float density: constant density in :math:`\frac{kg}{m^3}`
   :param List[List[float[3]]] computation_points: multiple cartesian computation points :math:`P`
   :return: list of tuple of potential, acceleration, and second derivative tensor
   :rtype: List[Tuple[float, List[float[3]], List[float[6]]]]


utility
~~~~~~~

This submodule contains useful utility functions like parsing meshes
or checking if the polyhedron's mesh plane unit normals point outwards
like it is required by the polyhedral-gravity model.

.. py:function:: read(input_files)
    :noindex:

    Reads a polyhedron from a mesh file. The vertices and faces are read from input
    files (either .node/.face, mesh, .ply, .off, .stl). File-Order matters in case of the first option!

    :param List[str] input_files: polyhedral source files
    :return: tuple of vertices (N, 3) (floats) and faces (N, 3) (ints)
    :rtype: Tuple[List[List[float[3]]], List[List[int[3]]]]

.. py:function:: check_mesh(vertices, faces)
    :noindex:

    Checks if no triangles of the polyhedral mesh are degenerated by checking that their surface area
    is greater zero.
    Further, Checks if all the polyhedron's plane unit normals are pointing outwards.
    Reads a polyhedron from a mesh file

    :param List[List[float[3]]] vertices: vertices of the polyhedron
    :param List[List[int[3]]] faces: faces of the polyhedron
    :return: True if no triangle is degenerate and the polyhedron's plane unit normals are all pointing outwards.
    :rtype: Bool

.. py:function:: check_mesh(input_files)
    :noindex:

    Checks if no triangles of the polyhedral mesh are degenerate by checking that their surface area
    is greater zero.
    Further, Checks if all the polyhedron's plane unit normals are pointing outwards.
    Reads a polyhedron from a mesh file. The vertices and faces are read from input
    files (either .node/.face, mesh, .ply, .off, .stl). File-Order matters in case of the first option!

    :param List[str] input_files: polyhedral source files
    :return: True if no triangle is degenerate and the polyhedron's plane unit normals are all pointing outwards.
    :rtype: Bool

