#include "gtest/gtest.h"
#include "gmock/gmock.h"

#include <string>
#include <vector>
#include "polyhedralGravity/calculation/Gravity.h"
#include "polyhedralGravity/model/Polyhedron.h"

/**
 * Contains Tests based on the example from Tsoulis FORTRAN implementation.
 * Harcoded values taken from his implementation's results.
 */
class GravityTest : public ::testing::Test {

protected:
    //New polyhedron with given vertices and faces
    //this is the base example from Tsoulis
    polyhedralGravity::Polyhedron _polyhedron{
            {
                    {-20, 0, 25},
                    {0, 0, 25},
                    {0, 10, 25},
                    {-20, 10, 25},
                    {-20, 0, 15},
                    {0, 0, 15},
                    {0, 10, 15},
                    {-20, 10, 15}
            },
            {
                    {3,   1, 0},
                    {3, 2, 1},
                    {5, 4,  0},
                    {1,   5,  0},
                    {4,   7, 0},
                    {7, 3, 0},
                    {6, 5,  1},
                    {2,   6,  1},
                    {7, 6, 3},
                    {3, 6, 2},
                    {5, 6, 4},
                    {6, 7, 4}
            }
    };

    polyhedralGravity::Gravity systemUnderTest{_polyhedron};

};

TEST_F(GravityTest, GijVectors) {
    using namespace testing;
    using namespace ::polyhedralGravity;

    // G(i, j) = expectedGij(i * 3 + j)
    std::vector<std::array<double, 3>> expectedGij{
            {20.000000000000000,  -10.000000000000000, 0.0000000000000000},
            {-20.000000000000000, 0.0000000000000000,  0.0000000000000000},
            {0.0000000000000000,  10.000000000000000,  0.0000000000000000},
            {20.000000000000000,  0.0000000000000000,  0.0000000000000000},
            {0.0000000000000000,  -10.000000000000000, 0.0000000000000000},
            {-20.000000000000000, 10.000000000000000,  0.0000000000000000},
            {-20.000000000000000, 0.0000000000000000,  0.0000000000000000},
            {0.0000000000000000,  0.0000000000000000,  10.000000000000000},
            {20.000000000000000,  0.0000000000000000,  -10.000000000000000},
            {0.0000000000000000,  0.0000000000000000,  -10.000000000000000},
            {-20.000000000000000, 0.0000000000000000,  10.000000000000000},
            {20.000000000000000,  0.0000000000000000,  0.0000000000000000},
            {0.0000000000000000,  10.000000000000000,  0.0000000000000000},
            {0.0000000000000000,  -10.000000000000000, 10.000000000000000},
            {0.0000000000000000,  0.0000000000000000,  -10.000000000000000},
            {0.0000000000000000,  0.0000000000000000,  10.000000000000000},
            {0.0000000000000000,  -10.000000000000000, 0.0000000000000000},
            {0.0000000000000000,  10.000000000000000,  -10.000000000000000},
            {0.0000000000000000,  -10.000000000000000, 0.0000000000000000},
            {0.0000000000000000,  0.0000000000000000,  10.000000000000000},
            {0.0000000000000000,  10.000000000000000,  -10.000000000000000},
            {0.0000000000000000,  0.0000000000000000,  -10.000000000000000},
            {0.0000000000000000,  -10.000000000000000, 10.000000000000000},
            {0.0000000000000000,  10.000000000000000,  0.0000000000000000},
            {20.000000000000000,  0.0000000000000000,  0.0000000000000000},
            {-20.000000000000000, 0.0000000000000000,  10.000000000000000},
            {0.0000000000000000,  0.0000000000000000,  -10.000000000000000},
            {20.000000000000000,  0.0000000000000000,  -10.000000000000000},
            {0.0000000000000000,  0.0000000000000000,  10.000000000000000},
            {-20.000000000000000, 0.0000000000000000,  0.0000000000000000},
            {0.0000000000000000,  10.000000000000000,  0.0000000000000000},
            {-20.000000000000000, -10.000000000000000, 0.0000000000000000},
            {20.000000000000000,  0.0000000000000000,  0.0000000000000000},
            {-20.000000000000000, 0.0000000000000000,  0.0000000000000000},
            {0.0000000000000000,  -10.000000000000000, 0.0000000000000000},
            {20.000000000000000,  10.000000000000000,  0.0000000000000000}
    };
    auto actualGij = systemUnderTest.calculateGij();

    for (int i = 0; i < 12; ++i) {
        for (int j = 0; j < 3; ++j) {
            ASSERT_EQ(actualGij.at(i).at(j), expectedGij.at(i * 3 + j))
                                        << "The vector G_ij was not not equal at (i, j)=(" << i
                                        << ", " << j << ")";
        }
    }
}

TEST_F(GravityTest, PlaneUnitNormals) {
    using namespace testing;
    using namespace ::polyhedralGravity;

    //N(i) = expectedPlaneUnitNormals(i)
    std::vector<std::array<double, 3>> expectedPlaneUnitNormals{
            {-0.0000000000000000, -0.0000000000000000, -1.0000000000000000},
            {0.0000000000000000,  0.0000000000000000,  -1.0000000000000000},
            {0.0000000000000000,  1.0000000000000000,  -0.0000000000000000},
            {0.0000000000000000,  1.0000000000000000,  0.0000000000000000},
            {1.0000000000000000,  0.0000000000000000,  -0.0000000000000000},
            {1.0000000000000000,  0.0000000000000000,  -0.0000000000000000},
            {-1.0000000000000000, 0.0000000000000000,  0.0000000000000000},
            {-1.0000000000000000, -0.0000000000000000, -0.0000000000000000},
            {0.0000000000000000,  -1.0000000000000000, 0.0000000000000000},
            {0.0000000000000000,  -1.0000000000000000, 0.0000000000000000},
            {0.0000000000000000,  -0.0000000000000000, 1.0000000000000000},
            {0.0000000000000000,  0.0000000000000000,  1.0000000000000000}
    };

    auto actualPlaneUnitNormals = systemUnderTest.calculatePlaneUnitNormals();

    ASSERT_THAT(actualPlaneUnitNormals, ContainerEq(expectedPlaneUnitNormals));
}

TEST_F(GravityTest, SegmentUnitNormals) {
    using namespace testing;
    using namespace ::polyhedralGravity;

    // n(i, j) = expectedSegmentUnitNormals(i * 3 + j)
    std::vector<std::array<double, 3>> expectedSegmentUnitNormals{
            {0.44721359549995793,  0.89442719099991586,  -0.0000000000000000},
            {0.0000000000000000,   -1.0000000000000000,  0.0000000000000000},
            {-1.0000000000000000,  0.0000000000000000,   0.0000000000000000},
            {-0.0000000000000000,  1.0000000000000000,   0.0000000000000000},
            {1.0000000000000000,   0.0000000000000000,   0.0000000000000000},
            {-0.44721359549995793, -0.89442719099991586, -0.0000000000000000},
            {-0.0000000000000000,  0.0000000000000000,   -1.0000000000000000},
            {-1.0000000000000000,  0.0000000000000000,   0.0000000000000000},
            {0.44721359549995793,  0.0000000000000000,   0.89442719099991586},
            {1.0000000000000000,   -0.0000000000000000,  0.0000000000000000},
            {-0.44721359549995793, 0.0000000000000000,   -0.89442719099991586},
            {0.0000000000000000,   0.0000000000000000,   1.0000000000000000},
            {-0.0000000000000000,  0.0000000000000000,   -1.0000000000000000},
            {0.0000000000000000,   0.70710678118654746,  0.70710678118654746},
            {0.0000000000000000,   -1.0000000000000000,  0.0000000000000000},
            {-0.0000000000000000,  1.0000000000000000,   0.0000000000000000},
            {0.0000000000000000,   0.0000000000000000,   1.0000000000000000},
            {0.0000000000000000,   -0.70710678118654746, -0.70710678118654746},
            {-0.0000000000000000,  -0.0000000000000000,  -1.0000000000000000},
            {0.0000000000000000,   -1.0000000000000000,  0.0000000000000000},
            {0.0000000000000000,   0.70710678118654746,  0.70710678118654746},
            {-0.0000000000000000,  1.0000000000000000,   0.0000000000000000},
            {0.0000000000000000,   -0.70710678118654746, -0.70710678118654746},
            {0.0000000000000000,   0.0000000000000000,   1.0000000000000000},
            {0.0000000000000000,   0.0000000000000000,   -1.0000000000000000},
            {0.44721359549995793,  0.0000000000000000,   0.89442719099991586},
            {-1.0000000000000000,  -0.0000000000000000,  -0.0000000000000000},
            {-0.44721359549995793, -0.0000000000000000,  -0.89442719099991586},
            {1.0000000000000000,   0.0000000000000000,   -0.0000000000000000},
            {0.0000000000000000,   0.0000000000000000,   1.0000000000000000},
            {1.0000000000000000,   0.0000000000000000,   -0.0000000000000000},
            {-0.44721359549995793, 0.89442719099991586,  0.0000000000000000},
            {0.0000000000000000,   -1.0000000000000000,  -0.0000000000000000},
            {0.0000000000000000,   1.0000000000000000,   -0.0000000000000000},
            {-1.0000000000000000,  0.0000000000000000,   0.0000000000000000},
            {0.44721359549995793,  -0.89442719099991586, 0.0000000000000000}
    };

    auto actualSegmentUnitNormals = systemUnderTest.calculateSegmentUnitNormals();

    for (int i = 0; i < 12; ++i) {
        for (int j = 0; j < 3; ++j) {
            ASSERT_EQ(actualSegmentUnitNormals.at(i).at(j), expectedSegmentUnitNormals.at(i * 3 + j))
                                        << "The vector n_ij was not not equal at (i, j)=(" << i
                                        << ", " << j << ")";
        }
    }
}

